/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface NitroInterface extends ethers.utils.Interface {
  functions: {
    "CLAIM_ACCOUNT_REWARD_WITH_SIG_TYPEHASH()": FunctionFragment;
    "CLAIM_MECHA_REWARD_WITH_SIG_TYPEHASH()": FunctionFragment;
    "__Nitro_init(address,address)": FunctionFragment;
    "accountClaimedReward(address,uint256)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "claimAccountReward(uint256,uint256,uint256,tuple)": FunctionFragment;
    "claimAccountRewardWithSigNonces(address)": FunctionFragment;
    "claimMechaReward(uint256,uint256,uint256,uint256,tuple)": FunctionFragment;
    "claimMechaRewardWithSigNonces(uint256)": FunctionFragment;
    "cooldown()": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "feeDestinations(uint256)": FunctionFragment;
    "feePercentages(uint256)": FunctionFragment;
    "feeToMerge(uint256)": FunctionFragment;
    "feeToUse()": FunctionFragment;
    "feeToken()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mechaAccountCooldown(uint256,address)": FunctionFragment;
    "mechaClaimedReward(uint256,uint256)": FunctionFragment;
    "mechaToken()": FunctionFragment;
    "merge(uint256,uint256)": FunctionFragment;
    "mint(address,uint256,uint256,bytes)": FunctionFragment;
    "mintBatch(address,uint256[],uint256[],bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setCoolDown(uint256)": FunctionFragment;
    "setFeeDestinations(address[],uint256[])": FunctionFragment;
    "setFeeToMerge(uint256,uint256)": FunctionFragment;
    "setFeeToUse(uint256)": FunctionFragment;
    "setSigner(address)": FunctionFragment;
    "setURI(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "use(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CLAIM_ACCOUNT_REWARD_WITH_SIG_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLAIM_MECHA_REWARD_WITH_SIG_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__Nitro_init",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "accountClaimedReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAccountReward",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      { deadline: BigNumberish; v: BigNumberish; r: BytesLike; s: BytesLike }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAccountRewardWithSigNonces",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMechaReward",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      { deadline: BigNumberish; v: BigNumberish; r: BytesLike; s: BytesLike }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMechaRewardWithSigNonces",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cooldown", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeDestinations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feePercentages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeToMerge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeToUse", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mechaAccountCooldown",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mechaClaimedReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mechaToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "merge",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoolDown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeDestinations",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeToMerge",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeToUse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setSigner", values: [string]): string;
  encodeFunctionData(functionFragment: "setURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "use",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CLAIM_ACCOUNT_REWARD_WITH_SIG_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CLAIM_MECHA_REWARD_WITH_SIG_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__Nitro_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountClaimedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAccountReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAccountRewardWithSigNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMechaReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMechaRewardWithSigNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cooldown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeDestinations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feePercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeToMerge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeToUse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mechaAccountCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mechaClaimedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mechaToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "merge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoolDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeDestinations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeToMerge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeToUse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "use", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "NitroMerged(address,uint256,uint256)": EventFragment;
    "NitroUsed(uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NitroMerged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NitroUsed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class Nitro extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: NitroInterface;

  functions: {
    CLAIM_ACCOUNT_REWARD_WITH_SIG_TYPEHASH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "CLAIM_ACCOUNT_REWARD_WITH_SIG_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    CLAIM_MECHA_REWARD_WITH_SIG_TYPEHASH(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "CLAIM_MECHA_REWARD_WITH_SIG_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    __Nitro_init(
      _mechaToken: string,
      _feeToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "__Nitro_init(address,address)"(
      _mechaToken: string,
      _feeToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    accountClaimedReward(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "accountClaimedReward(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    claimAccountReward(
      challenge: BigNumberish,
      nitroId: BigNumberish,
      amount: BigNumberish,
      sig_: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimAccountReward(uint256,uint256,uint256,tuple)"(
      challenge: BigNumberish,
      nitroId: BigNumberish,
      amount: BigNumberish,
      sig_: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimAccountRewardWithSigNonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "claimAccountRewardWithSigNonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    claimMechaReward(
      mechaId: BigNumberish,
      challenge: BigNumberish,
      nitroId: BigNumberish,
      amount: BigNumberish,
      sig_: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimMechaReward(uint256,uint256,uint256,uint256,tuple)"(
      mechaId: BigNumberish,
      challenge: BigNumberish,
      nitroId: BigNumberish,
      amount: BigNumberish,
      sig_: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimMechaRewardWithSigNonces(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "claimMechaRewardWithSigNonces(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    cooldown(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "cooldown()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    exists(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "exists(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    feeDestinations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "feeDestinations(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    feePercentages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "feePercentages(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    feeToMerge(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "feeToMerge(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    feeToUse(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "feeToUse()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    feeToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "feeToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    mechaAccountCooldown(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "mechaAccountCooldown(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    mechaClaimedReward(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "mechaClaimedReward(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    mechaToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "mechaToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    merge(
      nitroId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "merge(uint256,uint256)"(
      nitroId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mint(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address,uint256,uint256,bytes)"(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintBatch(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintBatch(address,uint256[],uint256[],bytes)"(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "paused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCoolDown(
      _cooldown: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCoolDown(uint256)"(
      _cooldown: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFeeDestinations(
      _destinations: string[],
      _percentages: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeDestinations(address[],uint256[])"(
      _destinations: string[],
      _percentages: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFeeToMerge(
      _nitroId: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeToMerge(uint256,uint256)"(
      _nitroId: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFeeToUse(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeToUse(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSigner(
      _signer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSigner(address)"(
      _signer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setURI(newuri: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setURI(string)"(
      newuri: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupply(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

    uri(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "uri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    use(
      mechaId: BigNumberish,
      nitroId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "use(uint256,uint256)"(
      mechaId: BigNumberish,
      nitroId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  CLAIM_ACCOUNT_REWARD_WITH_SIG_TYPEHASH(
    overrides?: CallOverrides
  ): Promise<string>;

  "CLAIM_ACCOUNT_REWARD_WITH_SIG_TYPEHASH()"(
    overrides?: CallOverrides
  ): Promise<string>;

  CLAIM_MECHA_REWARD_WITH_SIG_TYPEHASH(
    overrides?: CallOverrides
  ): Promise<string>;

  "CLAIM_MECHA_REWARD_WITH_SIG_TYPEHASH()"(
    overrides?: CallOverrides
  ): Promise<string>;

  __Nitro_init(
    _mechaToken: string,
    _feeToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "__Nitro_init(address,address)"(
    _mechaToken: string,
    _feeToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  accountClaimedReward(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "accountClaimedReward(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,uint256)"(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "balanceOfBatch(address[],uint256[])"(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  claimAccountReward(
    challenge: BigNumberish,
    nitroId: BigNumberish,
    amount: BigNumberish,
    sig_: {
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimAccountReward(uint256,uint256,uint256,tuple)"(
    challenge: BigNumberish,
    nitroId: BigNumberish,
    amount: BigNumberish,
    sig_: {
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimAccountRewardWithSigNonces(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimAccountRewardWithSigNonces(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimMechaReward(
    mechaId: BigNumberish,
    challenge: BigNumberish,
    nitroId: BigNumberish,
    amount: BigNumberish,
    sig_: {
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimMechaReward(uint256,uint256,uint256,uint256,tuple)"(
    mechaId: BigNumberish,
    challenge: BigNumberish,
    nitroId: BigNumberish,
    amount: BigNumberish,
    sig_: {
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimMechaRewardWithSigNonces(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimMechaRewardWithSigNonces(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cooldown(overrides?: CallOverrides): Promise<BigNumber>;

  "cooldown()"(overrides?: CallOverrides): Promise<BigNumber>;

  exists(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "exists(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  feeDestinations(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "feeDestinations(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  feePercentages(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "feePercentages(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  feeToMerge(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "feeToMerge(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  feeToUse(overrides?: CallOverrides): Promise<BigNumber>;

  "feeToUse()"(overrides?: CallOverrides): Promise<BigNumber>;

  feeToken(overrides?: CallOverrides): Promise<string>;

  "feeToken()"(overrides?: CallOverrides): Promise<string>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mechaAccountCooldown(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "mechaAccountCooldown(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mechaClaimedReward(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "mechaClaimedReward(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mechaToken(overrides?: CallOverrides): Promise<string>;

  "mechaToken()"(overrides?: CallOverrides): Promise<string>;

  merge(
    nitroId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "merge(uint256,uint256)"(
    nitroId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mint(
    account: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(address,uint256,uint256,bytes)"(
    account: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintBatch(
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintBatch(address,uint256[],uint256[],bytes)"(
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,uint256,bytes)"(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCoolDown(
    _cooldown: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCoolDown(uint256)"(
    _cooldown: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFeeDestinations(
    _destinations: string[],
    _percentages: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeDestinations(address[],uint256[])"(
    _destinations: string[],
    _percentages: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFeeToMerge(
    _nitroId: BigNumberish,
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeToMerge(uint256,uint256)"(
    _nitroId: BigNumberish,
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFeeToUse(
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeToUse(uint256)"(
    _fee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSigner(
    _signer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSigner(address)"(
    _signer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setURI(newuri: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setURI(string)"(
    newuri: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalSupply(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  uri(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "uri(uint256)"(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  use(
    mechaId: BigNumberish,
    nitroId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "use(uint256,uint256)"(
    mechaId: BigNumberish,
    nitroId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    CLAIM_ACCOUNT_REWARD_WITH_SIG_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    "CLAIM_ACCOUNT_REWARD_WITH_SIG_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<string>;

    CLAIM_MECHA_REWARD_WITH_SIG_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    "CLAIM_MECHA_REWARD_WITH_SIG_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<string>;

    __Nitro_init(
      _mechaToken: string,
      _feeToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "__Nitro_init(address,address)"(
      _mechaToken: string,
      _feeToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    accountClaimedReward(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "accountClaimedReward(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    claimAccountReward(
      challenge: BigNumberish,
      nitroId: BigNumberish,
      amount: BigNumberish,
      sig_: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "claimAccountReward(uint256,uint256,uint256,tuple)"(
      challenge: BigNumberish,
      nitroId: BigNumberish,
      amount: BigNumberish,
      sig_: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    claimAccountRewardWithSigNonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimAccountRewardWithSigNonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimMechaReward(
      mechaId: BigNumberish,
      challenge: BigNumberish,
      nitroId: BigNumberish,
      amount: BigNumberish,
      sig_: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "claimMechaReward(uint256,uint256,uint256,uint256,tuple)"(
      mechaId: BigNumberish,
      challenge: BigNumberish,
      nitroId: BigNumberish,
      amount: BigNumberish,
      sig_: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    claimMechaRewardWithSigNonces(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimMechaRewardWithSigNonces(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cooldown(overrides?: CallOverrides): Promise<BigNumber>;

    "cooldown()"(overrides?: CallOverrides): Promise<BigNumber>;

    exists(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "exists(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    feeDestinations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "feeDestinations(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    feePercentages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "feePercentages(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeToMerge(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "feeToMerge(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeToUse(overrides?: CallOverrides): Promise<BigNumber>;

    "feeToUse()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeToken(overrides?: CallOverrides): Promise<string>;

    "feeToken()"(overrides?: CallOverrides): Promise<string>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mechaAccountCooldown(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mechaAccountCooldown(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mechaClaimedReward(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "mechaClaimedReward(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mechaToken(overrides?: CallOverrides): Promise<string>;

    "mechaToken()"(overrides?: CallOverrides): Promise<string>;

    merge(
      nitroId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "merge(uint256,uint256)"(
      nitroId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256,uint256,bytes)"(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    mintBatch(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintBatch(address,uint256[],uint256[],bytes)"(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCoolDown(
      _cooldown: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCoolDown(uint256)"(
      _cooldown: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeDestinations(
      _destinations: string[],
      _percentages: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeeDestinations(address[],uint256[])"(
      _destinations: string[],
      _percentages: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeToMerge(
      _nitroId: BigNumberish,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeeToMerge(uint256,uint256)"(
      _nitroId: BigNumberish,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeToUse(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setFeeToUse(uint256)"(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSigner(_signer: string, overrides?: CallOverrides): Promise<void>;

    "setSigner(address)"(
      _signer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setURI(newuri: string, overrides?: CallOverrides): Promise<void>;

    "setURI(string)"(newuri: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupply(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    uri(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "uri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    use(
      mechaId: BigNumberish,
      nitroId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "use(uint256,uint256)"(
      mechaId: BigNumberish,
      nitroId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ApprovalForAll(
      account: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    NitroMerged(
      account: string | null,
      nitroId: BigNumberish | null,
      amount: null
    ): EventFilter;

    NitroUsed(
      mechaId: BigNumberish | null,
      account: string | null,
      nitroId: BigNumberish | null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Paused(account: null): EventFilter;

    TransferBatch(
      operator: string | null,
      from: string | null,
      to: string | null,
      ids: null,
      values: null
    ): EventFilter;

    TransferSingle(
      operator: string | null,
      from: string | null,
      to: string | null,
      id: null,
      value: null
    ): EventFilter;

    URI(value: null, id: BigNumberish | null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    CLAIM_ACCOUNT_REWARD_WITH_SIG_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "CLAIM_ACCOUNT_REWARD_WITH_SIG_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CLAIM_MECHA_REWARD_WITH_SIG_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "CLAIM_MECHA_REWARD_WITH_SIG_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    __Nitro_init(
      _mechaToken: string,
      _feeToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "__Nitro_init(address,address)"(
      _mechaToken: string,
      _feeToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    accountClaimedReward(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accountClaimedReward(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAccountReward(
      challenge: BigNumberish,
      nitroId: BigNumberish,
      amount: BigNumberish,
      sig_: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimAccountReward(uint256,uint256,uint256,tuple)"(
      challenge: BigNumberish,
      nitroId: BigNumberish,
      amount: BigNumberish,
      sig_: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimAccountRewardWithSigNonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimAccountRewardWithSigNonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimMechaReward(
      mechaId: BigNumberish,
      challenge: BigNumberish,
      nitroId: BigNumberish,
      amount: BigNumberish,
      sig_: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimMechaReward(uint256,uint256,uint256,uint256,tuple)"(
      mechaId: BigNumberish,
      challenge: BigNumberish,
      nitroId: BigNumberish,
      amount: BigNumberish,
      sig_: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimMechaRewardWithSigNonces(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimMechaRewardWithSigNonces(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cooldown(overrides?: CallOverrides): Promise<BigNumber>;

    "cooldown()"(overrides?: CallOverrides): Promise<BigNumber>;

    exists(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "exists(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeDestinations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "feeDestinations(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feePercentages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "feePercentages(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeToMerge(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "feeToMerge(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeToUse(overrides?: CallOverrides): Promise<BigNumber>;

    "feeToUse()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeToken(overrides?: CallOverrides): Promise<BigNumber>;

    "feeToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mechaAccountCooldown(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mechaAccountCooldown(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mechaClaimedReward(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mechaClaimedReward(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mechaToken(overrides?: CallOverrides): Promise<BigNumber>;

    "mechaToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    merge(
      nitroId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "merge(uint256,uint256)"(
      nitroId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mint(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(address,uint256,uint256,bytes)"(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintBatch(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintBatch(address,uint256[],uint256[],bytes)"(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCoolDown(
      _cooldown: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCoolDown(uint256)"(
      _cooldown: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFeeDestinations(
      _destinations: string[],
      _percentages: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFeeDestinations(address[],uint256[])"(
      _destinations: string[],
      _percentages: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFeeToMerge(
      _nitroId: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFeeToMerge(uint256,uint256)"(
      _nitroId: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFeeToUse(_fee: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setFeeToUse(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSigner(_signer: string, overrides?: Overrides): Promise<BigNumber>;

    "setSigner(address)"(
      _signer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setURI(newuri: string, overrides?: Overrides): Promise<BigNumber>;

    "setURI(string)"(newuri: string, overrides?: Overrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupply(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;

    uri(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "uri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    use(
      mechaId: BigNumberish,
      nitroId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "use(uint256,uint256)"(
      mechaId: BigNumberish,
      nitroId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CLAIM_ACCOUNT_REWARD_WITH_SIG_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CLAIM_ACCOUNT_REWARD_WITH_SIG_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CLAIM_MECHA_REWARD_WITH_SIG_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CLAIM_MECHA_REWARD_WITH_SIG_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __Nitro_init(
      _mechaToken: string,
      _feeToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "__Nitro_init(address,address)"(
      _mechaToken: string,
      _feeToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    accountClaimedReward(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accountClaimedReward(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimAccountReward(
      challenge: BigNumberish,
      nitroId: BigNumberish,
      amount: BigNumberish,
      sig_: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimAccountReward(uint256,uint256,uint256,tuple)"(
      challenge: BigNumberish,
      nitroId: BigNumberish,
      amount: BigNumberish,
      sig_: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimAccountRewardWithSigNonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimAccountRewardWithSigNonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimMechaReward(
      mechaId: BigNumberish,
      challenge: BigNumberish,
      nitroId: BigNumberish,
      amount: BigNumberish,
      sig_: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimMechaReward(uint256,uint256,uint256,uint256,tuple)"(
      mechaId: BigNumberish,
      challenge: BigNumberish,
      nitroId: BigNumberish,
      amount: BigNumberish,
      sig_: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimMechaRewardWithSigNonces(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimMechaRewardWithSigNonces(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cooldown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cooldown()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exists(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exists(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeDestinations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "feeDestinations(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feePercentages(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "feePercentages(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeToMerge(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "feeToMerge(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeToUse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeToUse()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mechaAccountCooldown(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mechaAccountCooldown(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mechaClaimedReward(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mechaClaimedReward(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mechaToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mechaToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merge(
      nitroId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "merge(uint256,uint256)"(
      nitroId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mint(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256,uint256,bytes)"(
      account: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintBatch(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintBatch(address,uint256[],uint256[],bytes)"(
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCoolDown(
      _cooldown: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCoolDown(uint256)"(
      _cooldown: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFeeDestinations(
      _destinations: string[],
      _percentages: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeDestinations(address[],uint256[])"(
      _destinations: string[],
      _percentages: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFeeToMerge(
      _nitroId: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeToMerge(uint256,uint256)"(
      _nitroId: BigNumberish,
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFeeToUse(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeToUse(uint256)"(
      _fee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSigner(
      _signer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSigner(address)"(
      _signer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setURI(
      newuri: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setURI(string)"(
      newuri: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupply(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    uri(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uri(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    use(
      mechaId: BigNumberish,
      nitroId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "use(uint256,uint256)"(
      mechaId: BigNumberish,
      nitroId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
